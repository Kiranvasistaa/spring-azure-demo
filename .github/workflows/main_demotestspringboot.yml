name: Build and deploy JAR app to Azure Function App - demofunlinapp

on:
  push:
    branches:
      - develop
    paths:
      - 'java-code/**'
      - 'pom.xml'
      - '.github/workflows/main_demotestspringboot.yml'

env:
  AZURE_FUNCTIONAPP_NAME: demofunlinapp # set this to your function app name on Azure
  POM_XML_DIRECTORY: '.'                # set this to the directory which contains pom.xml file
  JAVA_VERSION: '17'                    # set this to the java version to use

jobs:
  build-and-deploy:
    runs-on: windows-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Unit Testing
        run: mvn test

      - name: 'Restore Project Dependencies Using Mvn'
        shell: bash
        run: |
          pushd './${{ env.POM_XML_DIRECTORY }}'
          mvn clean package
          popd

      - name: Upload JAR to Azure Storage
        shell: pwsh
        run: |
          az storage blob upload `
            --account-name $env:AZURE_STORAGE_ACCOUNT `
            --account-key $env:AZURE_STORAGE_KEY `
            --container-name $env:AZURE_STORAGE_CONTAINER `
            --name my-app-folder/my-app.jar `
            --file target/my-app.jar

      - name: Download JAR from Azure Storage
        shell: pwsh
        run: |
          az storage blob download `
            --account-name $env:AZURE_STORAGE_ACCOUNT `
            --account-key $env:AZURE_STORAGE_KEY `
            --container-name $env:AZURE_STORAGE_CONTAINER `
            --name my-app-folder/my-app.jar `
            --file my-app/my-app.jar

      - name: List downloaded files
        shell: pwsh
        run: Get-ChildItem -Path my-app

      - name: Verify JAR file
        shell: pwsh
        run: |
          if (!(Test-Path -Path "my-app/my-app.jar")) {
            Write-Error "JAR file not found!"
            exit 1
          }

      - name: Azure Login
        run: az login
        env:
          AZURE_SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          AZURE_SERVICE_PRINCIPAL_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_SERVICE_PRINCIPAL_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Run Azure Functions Action
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: 'demofunlinapp'
          package: 'my-app' # Specify the folder containing the downloaded JAR file
          publish-profile: ${{ secrets.PUBLISH_PROFILE }}
          respect-pom-xml: true



        
  #     - name: Build with Maven and Run SonarCloud analysis
  #       run: mvn clean verify sonar:sonar
  #       env:
  #         TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #     - name: Rename JAR file
  #       run: mv target/*.jar target/my-app.jar

  #     - name: Upload artifact for deployment job
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: java-app
  #         path: '${{ github.workspace }}/target/my-app.jar'    

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   environment:
  #     name: 'Production'
      
  #   steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: java-app
  #         path: '${{ github.workspace }}/target/my-app.jar'

      # - name: Azure Login
      #   run: az login
      #   env:
      #       AZURE_SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #       AZURE_SERVICE_PRINCIPAL_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      #       AZURE_SERVICE_PRINCIPAL_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      
  #     - name: Run Azure Functions Action
  #       id: deploy-to-functionapp
  #       uses: Azure/functions-action@v1
  #       with:
  #         app-name: 'demofunlinapp'
  #         package: '${{ env.POM_XML_DIRECTORY }}'
  #         respect-pom-xml: true
  #         publish-profile: ${{ secrets.PUBLISHPROFILE }}